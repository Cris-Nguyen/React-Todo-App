{"ast":null,"code":"import { ADD_TODO, UPDATE_TODO, REMOVE_TODO, COMPLETE_TODO } from \"../actionTypes\";\nconst initialState = {\n  todos: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      {\n        const {\n          value\n        } = action.payload;\n\n        if (!value.text || /^\\s*$/.test(value.text)) {\n          return { ...state\n          };\n        }\n\n        return { ...state,\n          todos: [value, ...state.todos]\n        };\n        console.log(state.todos);\n      }\n\n    case UPDATE_TODO:\n      {\n        const {\n          id,\n          newValue\n        } = action.payload;\n        const newList = state.todos.slice();\n        newList[id] = newValue;\n\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n          return { ...state\n          };\n        }\n\n        return { ...state,\n          todos: newList\n        };\n      }\n\n    case REMOVE_TODO:\n      {\n        const {\n          id\n        } = action.payload;\n        return { ...state,\n          todos: [...state.todos].filter(todo => todo.id !== id)\n        };\n      }\n\n    case COMPLETE_TODO:\n      {\n        const {\n          id\n        } = action.payload;\n        return { ...state,\n          todos: state.todos.map(todo => {\n            if (todo.id === id) {\n              todo.isComplete = !todo.isComplete;\n            }\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/crisnguyen/workspace/Learn Technologies/Web Development/React-Todo-App/src/redux/reducers/todos.js"],"names":["ADD_TODO","UPDATE_TODO","REMOVE_TODO","COMPLETE_TODO","initialState","todos","state","action","type","value","payload","text","test","console","log","id","newValue","newList","slice","filter","todo","map","isComplete"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,EAA6CC,aAA7C,QAAkE,gBAAlE;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,eAAe,UAASC,KAAK,GAAGF,YAAjB,EAA+BG,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,QAAL;AAAe;AACb,cAAM;AAAES,UAAAA;AAAF,YAAYF,MAAM,CAACG,OAAzB;;AACA,YAAK,CAACD,KAAK,CAACE,IAAP,IAAe,QAAQC,IAAR,CAAaH,KAAK,CAACE,IAAnB,CAApB,EAA8C;AAC5C,iBAAO,EACL,GAAGL;AADE,WAAP;AAGD;;AACD,eAAO,EACL,GAAGA,KADE;AAELD,UAAAA,KAAK,EAAE,CAACI,KAAD,EAAQ,GAAGH,KAAK,CAACD,KAAjB;AAFF,SAAP;AAIAQ,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACD,KAAlB;AACD;;AAED,SAAKJ,WAAL;AAAkB;AAChB,cAAM;AAAEc,UAAAA,EAAF;AAAMC,UAAAA;AAAN,YAAmBT,MAAM,CAACG,OAAhC;AACA,cAAMO,OAAO,GAAGX,KAAK,CAACD,KAAN,CAAYa,KAAZ,EAAhB;AACAD,QAAAA,OAAO,CAACF,EAAD,CAAP,GAAcC,QAAd;;AACA,YAAI,CAACA,QAAQ,CAACL,IAAV,IAAkB,QAAQC,IAAR,CAAaI,QAAQ,CAACL,IAAtB,CAAtB,EAAmD;AACjD,iBAAO,EACL,GAAGL;AADE,WAAP;AAGD;;AACD,eAAO,EACL,GAAGA,KADE;AAELD,UAAAA,KAAK,EAAEY;AAFF,SAAP;AAID;;AAED,SAAKf,WAAL;AAAkB;AAChB,cAAM;AAAEa,UAAAA;AAAF,YAASR,MAAM,CAACG,OAAtB;AACA,eAAO,EACL,GAAGJ,KADE;AAELD,UAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAV,EAAiBc,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAA5C;AAFF,SAAP;AAID;;AAED,SAAKZ,aAAL;AAAoB;AAChB,cAAM;AAAEY,UAAAA;AAAF,YAASR,MAAM,CAACG,OAAtB;AACA,eAAO,EACL,GAAGJ,KADE;AAELD,UAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYgB,GAAZ,CAAgBD,IAAI,IAAI;AAC7B,gBAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAChBK,cAAAA,IAAI,CAACE,UAAL,GAAkB,CAACF,IAAI,CAACE,UAAxB;AACH;AACF,WAJM;AAFF,SAAP;AAQH;;AAED;AACE,aAAOhB,KAAP;AAnDJ;AAqDD","sourcesContent":["import { ADD_TODO, UPDATE_TODO, REMOVE_TODO, COMPLETE_TODO } from \"../actionTypes\";\n\nconst initialState = {\n  todos: [],\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      const { value } = action.payload;\n      if  (!value.text || /^\\s*$/.test(value.text)) {\n        return {\n          ...state\n        }\n      }\n      return {\n        ...state,\n        todos: [value, ...state.todos]\n      }\n      console.log(state.todos);\n    }\n    \n    case UPDATE_TODO: {\n      const { id, newValue } = action.payload;\n      const newList = state.todos.slice();\n      newList[id] = newValue;\n      if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n        return {\n          ...state\n        }\n      }\n      return {\n        ...state,\n        todos: newList\n      }\n    }\n    \n    case REMOVE_TODO: {\n      const { id } = action.payload;\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== id)\n      }\n    }\n\n    case COMPLETE_TODO: {\n        const { id } = action.payload;\n        return {\n          ...state,\n          todos: state.todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n          })\n        }\n    }\n    \n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}