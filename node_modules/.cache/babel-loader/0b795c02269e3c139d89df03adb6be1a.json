{"ast":null,"code":"import { ADD_TODO, UPDATE_TODO, REMOVE_TODO, COMPLETE_TODO } from \"../actionTypes\";\nconst initialState = {\n  todos: []\n};\n\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      {\n        const {\n          id,\n          value\n        } = action.payload;\n        console.log(value);\n\n        if (!value.text || /^\\s*$/.test(value.text)) {\n          return { ...state\n          };\n        }\n\n        return { ...state,\n          todos: [value, ...state.todos]\n        };\n      }\n\n    case UPDATE_TODO:\n      {\n        const {\n          id,\n          newValue\n        } = action.payload;\n        const newList = state.todos.slice();\n        newList[id] = newValue;\n\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n          return { ...state\n          };\n        }\n\n        return { ...state,\n          todos: newList\n        };\n      }\n\n    case REMOVE_TODO:\n      {\n        const {\n          id\n        } = action.payload;\n        return { ...state,\n          todos: [...state.todos].filter(todo => todo.id !== id)\n        };\n      }\n\n    case COMPLETE_TODO:\n      {\n        const {\n          id\n        } = action.payload;\n        return { ...state,\n          todos: state.todos.map(todo => {\n            if (todo.id === id) {\n              todo.isComplete = !todo.isComplete;\n            }\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;","map":{"version":3,"sources":["/home/crisnguyen/workspace/Learn Technologies/Web Development/React-Todo-App/src/redux/reducers/TodoList.js"],"names":["ADD_TODO","UPDATE_TODO","REMOVE_TODO","COMPLETE_TODO","initialState","todos","todosReducer","state","action","type","id","value","payload","console","log","text","test","newValue","newList","slice","filter","todo","map","isComplete"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,EAA6CC,aAA7C,QAAkE,gBAAlE;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,QAAL;AAAe;AACb,cAAM;AAAEU,UAAAA,EAAF;AAAMC,UAAAA;AAAN,YAAgBH,MAAM,CAACI,OAA7B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,YAAK,CAACA,KAAK,CAACI,IAAP,IAAe,QAAQC,IAAR,CAAaL,KAAK,CAACI,IAAnB,CAApB,EAA8C;AAC5C,iBAAO,EACL,GAAGR;AADE,WAAP;AAGD;;AACD,eAAO,EACL,GAAGA,KADE;AAELF,UAAAA,KAAK,EAAE,CAACM,KAAD,EAAQ,GAAGJ,KAAK,CAACF,KAAjB;AAFF,SAAP;AAID;;AAED,SAAKJ,WAAL;AAAkB;AAChB,cAAM;AAAES,UAAAA,EAAF;AAAMO,UAAAA;AAAN,YAAmBT,MAAM,CAACI,OAAhC;AACA,cAAMM,OAAO,GAAGX,KAAK,CAACF,KAAN,CAAYc,KAAZ,EAAhB;AACAD,QAAAA,OAAO,CAACR,EAAD,CAAP,GAAcO,QAAd;;AACA,YAAI,CAACA,QAAQ,CAACF,IAAV,IAAkB,QAAQC,IAAR,CAAaC,QAAQ,CAACF,IAAtB,CAAtB,EAAmD;AACjD,iBAAO,EACL,GAAGR;AADE,WAAP;AAGD;;AACD,eAAO,EACL,GAAGA,KADE;AAELF,UAAAA,KAAK,EAAEa;AAFF,SAAP;AAID;;AAED,SAAKhB,WAAL;AAAkB;AAChB,cAAM;AAAEQ,UAAAA;AAAF,YAASF,MAAM,CAACI,OAAtB;AACA,eAAO,EACL,GAAGL,KADE;AAELF,UAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBe,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAA5C;AAFF,SAAP;AAID;;AAED,SAAKP,aAAL;AAAoB;AAChB,cAAM;AAAEO,UAAAA;AAAF,YAASF,MAAM,CAACI,OAAtB;AACA,eAAO,EACL,GAAGL,KADE;AAELF,UAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYiB,GAAZ,CAAgBD,IAAI,IAAI;AAC7B,gBAAIA,IAAI,CAACX,EAAL,KAAYA,EAAhB,EAAoB;AAChBW,cAAAA,IAAI,CAACE,UAAL,GAAkB,CAACF,IAAI,CAACE,UAAxB;AACH;AACF,WAJM;AAFF,SAAP;AAQH;;AAED;AACE,aAAOhB,KAAP;AAnDJ;AAqDD,CAtDD;;AAwDA,eAAeD,YAAf","sourcesContent":["import { ADD_TODO, UPDATE_TODO, REMOVE_TODO, COMPLETE_TODO } from \"../actionTypes\";\n\nconst initialState = {\n  todos: [],\n};\n\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO: {\n      const { id, value } = action.payload;\n      console.log(value);\n      if  (!value.text || /^\\s*$/.test(value.text)) {\n        return {\n          ...state\n        }\n      }\n      return {\n        ...state,\n        todos: [value, ...state.todos]\n      }\n    }\n    \n    case UPDATE_TODO: {\n      const { id, newValue } = action.payload;\n      const newList = state.todos.slice();\n      newList[id] = newValue;\n      if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n        return {\n          ...state\n        }\n      }\n      return {\n        ...state,\n        todos: newList\n      }\n    }\n    \n    case REMOVE_TODO: {\n      const { id } = action.payload;\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== id)\n      }\n    }\n\n    case COMPLETE_TODO: {\n        const { id } = action.payload;\n        return {\n          ...state,\n          todos: state.todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n          })\n        }\n    }\n    \n    default:\n      return state;\n  }\n}\n\nexport default todosReducer;"]},"metadata":{},"sourceType":"module"}