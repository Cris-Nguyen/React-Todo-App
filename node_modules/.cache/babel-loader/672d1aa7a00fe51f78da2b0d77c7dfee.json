{"ast":null,"code":"var _jsxFileName = \"/home/crisnguyen/workspace/Learn Technologies/Web Development/React-Todo-App/src/components/TodoList.js\";\n// import React, { useState } from 'react'\nimport React from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { connect } from \"react-redux\";\nimport { addTodo, updateTodo, removeTodo, completeTodo } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n  } // const [todos, setTodos] = useState([]);\n\n  /* const addTodo = todo => {\n      if (!todo.text || /^\\s*$/.test(todo.text)) {\n          return;\n      }\n      const subTodos = [todo, ...todos];\n      setTodos(subTodos);      \n  }\n   const updateTodo = (todoId, newValue) => {\n      if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n          return;\n      }\n      setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  }\n   const removeTodo = id => {\n      const removeArr = [...todos].filter(todo => todo.id !== id);\n      setTodos(removeArr);\n  }\n   const completeTodo = id => {\n      let updatedTodos = todos.map(todo => {\n          if (todo.id === id) {\n              todo.isComplete = !todo.isComplete;\n          }\n          return todo;\n      });\n      setTodos(updatedTodos);\n  } */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Daily tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n        onSubmit: addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Todo, {\n        todos: this.state.todos,\n        updateTodo: updateTodo,\n        completeTodo: completeTodo,\n        removeTodo: removeTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n} // export default TodoList;\n\n\nexport default connect(null, {\n  addTodo,\n  updateTodo,\n  removeTodo,\n  completeTodo\n})(TodoList);","map":{"version":3,"sources":["/home/crisnguyen/workspace/Learn Technologies/Web Development/React-Todo-App/src/components/TodoList.js"],"names":["React","TodoForm","Todo","connect","addTodo","updateTodo","removeTodo","completeTodo","TodoList","Component","constructor","props","state","todos","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B,EAA0CC,YAA1C,QAA8D,kBAA9D;;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACH,GAJkC,CAKnC;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIIC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEV;AAApB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,IAAD;AACI,QAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWC,KADtB;AAEI,QAAA,UAAU,EAAER,UAFhB;AAGI,QAAA,YAAY,EAAEE,YAHlB;AAII,QAAA,UAAU,EAAED;AAJhB;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAjDkC,C,CAoDvC;;;AACA,eAAeH,OAAO,CAClB,IADkB,EAElB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA,UAAvB;AAAmCC,EAAAA;AAAnC,CAFkB,CAAP,CAGbC,QAHa,CAAf","sourcesContent":["// import React, { useState } from 'react'\nimport React from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\nimport { connect } from \"react-redux\"\nimport { addTodo, updateTodo, removeTodo, completeTodo } from \"../redux/actions\"\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { todos: [] };\n    }\n    // const [todos, setTodos] = useState([]);\n\n    /* const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n        const subTodos = [todo, ...todos];\n        setTodos(subTodos);      \n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id);\n        setTodos(removeArr);\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    } */\n    render() {\n        return (\n            <div>\n                <h1>Daily tasks</h1>\n                <TodoForm onSubmit={addTodo} />\n                <Todo \n                    todos={this.state.todos}\n                    updateTodo={updateTodo}\n                    completeTodo={completeTodo}\n                    removeTodo={removeTodo}\n                />    \n            </div>\n        )\n    }\n}\n\n// export default TodoList;\nexport default connect(\n    null,\n    { addTodo, updateTodo, removeTodo, completeTodo }\n)(TodoList);"]},"metadata":{},"sourceType":"module"}